package org.broadinstitute.gpinformatics.infrastructure.search;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.ObjectNode;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * User selectable result column configurations for when a constrainedResultParamsExpression is attached <br />
 * Used to produce UI configuration via SearchTerm.getConstrainedResultParamsExpression. (All input value included) <br />
 * Used to store value for use in SearchTerm.getDisplayValueExpression, input value not included. (ParamInput names tightly coupled to a specific displayValueExpression)
 */
public class ResultParams implements Serializable {
    private String searchTermName;
    private String userColumnName;
    private Map<String,ParamInput> paramInputs = new LinkedHashMap<>();
    private String formValidationScript;

    public enum InputType {
        TEXT,
        CHECKBOX,
        CHECKBOX_GROUP,
        RADIO,
        PICKLIST,
        MULTI_PICKLIST
    }

    /**
     * Represents what's needed to construct inputs for a single result param. <br />
     * Names must be unique for a list of params, only alphanumeric and underscore characters allowed <br />
     * HTML element ID will be same as name for text, checkbox, picklist, and multi picklist types <br />
     * For radio and checkbox group, all options will have same name and unique HTML IDs generated by concatenating param name, underscore, and ConstrainedValue code.
     */
    public static class ParamInput {
        private String name;
        private InputType type;
        private String label;
        private String inputValidationScript;
        private List<ConstrainedValue> optionItems;
        private List<String> value = new ArrayList<>();

        public ParamInput(String name, InputType type, String label){
            this.name = name;
            this.type = type;
            this.label = label;
        }

        public ParamInput(String name){
            this( name, null, "");
        }

        public String getName() {
            return name;
        }

        public InputType getType() {
            return type;
        }

        public String getLabel() {
            return label;
        }

        public String getInputValidationScript() {
            return inputValidationScript;
        }

        public void setInputValidationScript(String inputValidationScript) {
            this.inputValidationScript = inputValidationScript;
        }

        public List<ConstrainedValue> getOptionItems() {
            return optionItems;
        }

        public void setOptionItems(List<ConstrainedValue> optionItems) {
            this.optionItems = optionItems;
        }

        public List<String> getValue() {
            return value;
        }

        public void setValue(List<String> value) {
            this.value = value;
        }
    }

    /**
     * Documentation indicates this is thread-safe so hold in static variable
     */
    @JsonIgnore
    private static ObjectMapper JSON_MAPPER = new ObjectMapper();

    public String getSearchTermName() {
        return searchTermName;
    }

    public void setSearchTermName(String searchTermName) {
        this.searchTermName = searchTermName;
    }

    public String getUserColumnName() {
        return userColumnName;
    }

    public void setUserColumnName(String userColumnName) {
        this.userColumnName = userColumnName;
    }

    public Map<String,ParamInput> getParamInputs() {
        if( paramInputs == null ) {
            return Collections.emptyMap();
        }
        return paramInputs;
    }

    /**
     * Add param input - name MUST be unique!
     */
    public void addParamInput(ParamInput paramInput) {
        if( paramInputs.get(paramInput.getName()) != null ) {
            throw new IllegalArgumentException( "Duplicate input element name (" + paramInput.getName() + ") not allowed");
        }
        this.paramInputs.put(paramInput.getName(), paramInput);
    }

    @Override
    public String toString(){
        try {
            ObjectNode root = JSON_MAPPER.createObjectNode();
            root.put("searchTermName", searchTermName);
            root.put("userColumnName", userColumnName );
            ArrayNode inputs = JSON_MAPPER.createArrayNode();
            root.put("paramInputs", inputs );
            for( Map.Entry<String,ParamInput> paramInputEntry : paramInputs.entrySet() ) {
                for (String value : paramInputEntry.getValue().getValue()) {
                    ObjectNode input = JSON_MAPPER.createObjectNode();
                    input.put("name", paramInputEntry.getKey());
                    input.put("value", value);
                    inputs.add(input);
                }
            }
            return JSON_MAPPER.writeValueAsString(root);
        } catch (IOException ioe) {
            return ioe.getMessage();
        }
    }
}
