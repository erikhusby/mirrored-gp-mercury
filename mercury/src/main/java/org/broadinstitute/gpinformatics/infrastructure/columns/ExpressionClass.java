package org.broadinstitute.gpinformatics.infrastructure.columns;

import org.broadinstitute.gpinformatics.mercury.entity.vessel.LabVessel;

import java.util.Collection;

/**
 * Enumerates classes to which DisplayExpressions can be applied.
 */
public enum ExpressionClass {
    SAMPLE_INSTANCE,
    // PDO 2, PRODUCT 2, RESEARCH_PROJECT, LCSET 2, XTR, FCT, NEAREST_SAMPLE_ID 2, ROOT_SAMPLE_ID 2, MOLECULAR_INDEX,
    // SAMPLE_TUBE_BARCODE
    LAB_VESSEL,
    // BARCODE 2 (SAMPLE_TUBE_BARCODE?), PLATE_NAME, VESSEL_TYPE, VESSEL_VOLUME, VESSEL_CONCENTRATION, SAMPLE_HISTORY,
    // BUCKET_COUNT, IN_PLACE_EVENT_TYPE, DNA_EXTRACTED_TUBE_BARCODE, RNA_EXTRACTED_TUBE_BARCODE,
    // IMPORTED_SAMPLE_TUBE_BARCODE, IMPORTED_SAMPLE_ID, IMPORTED_SAMPLE_POSITION, POND SAMPLE POSITION,
    // POND_TUBE_BARCODE, SHEARING_SAMPLE_POSITION, SHEARING_SAMPLE_BARCODE, CATCH_SAMPLE_POSITION, CATCH_TUBE_BARCODE,
    // FLOWCELL_BARCODE, SEQUENCING_RUN_NAME, EMERGE_VOLUME_TRANSFER [SM-ID, RACK BARCODE, RACK POSITION],
    // RACK_BARCODE, RACK_POSITION, DOWNSTREAM_LCSET, DOWNSTREAM_XTR, DOWNSTREAM_FCT, TOTAL_NG_INITIAL_PICO,
    // METADATA_VALUE, ABANDON_REASON, ABANDON_DATE,
    // SCAN_DATE, SCANNER_NAME, SCAN_USER, SCAN_RACK_BARCODE, SCAN_POSITION,
    // DNA_PLATE_WELL, DNA_ARRAY_PLATE_BARCODE, AMP_PLATE_WELL, AMP_PLATE_BARCODE, CHIP_WELL,
    // CHIP_BARCODE, DNA_PLATE_DRILLDOWN, AMP_PLATE_DRILLDOWN, CHIP_DRILLDOWN, HYB_CHAMBER, TECAN_POSITION,
    // INITIAL_PICO, PROCEED_IF_OOS
    LAB_EVENT,
    // LAB_EVENT_ID, EVENT_DATE, EVENT_LOCATION, EVENT_OPERATOR, EVENT_TYPE, PROGRAM_NAME, SIMULATION_MODE,
    // nested reagents?, SOURCE_LAB_VESSEL_TYPE, SOURCE_BARCODE, DESTINATION_LAB_VESSEL_TYPE, DESTINATION_BARCODE
    REAGENT,
    // REAGENT_TYPE, REAGENT_LOT, REAGENT_EXPIRATION,
    METADATA,
    SAMPLE_DATA; // or BSP?

    static Collection<?> xToY(Object x, ExpressionClass xClass, ExpressionClass yClass) {
        if (xClass == LAB_VESSEL && yClass == SAMPLE_INSTANCE) {
            LabVessel labVessel = (LabVessel) x;
            return labVessel.getSampleInstancesV2();
        } else {
            throw new RuntimeException("Unexpected combination " + xClass + " to " + yClass);
        }
    }
}

