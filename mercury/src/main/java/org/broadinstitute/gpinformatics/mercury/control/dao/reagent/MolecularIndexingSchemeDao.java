package org.broadinstitute.gpinformatics.mercury.control.dao.reagent;

import com.ibm.wsdl.extensions.mime.MIMEContentSerializer;
import org.broadinstitute.gpinformatics.infrastructure.jpa.GenericDao;
import org.broadinstitute.gpinformatics.mercury.entity.reagent.MolecularIndexingScheme;
import org.broadinstitute.gpinformatics.mercury.entity.reagent.MolecularIndexingScheme_;

import javax.ejb.Stateful;
import javax.enterprise.context.RequestScoped;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

/**
 * A collection of methods that query for MolecularIndexingSchemes. For all
 * find*IndexScheme() methods, the methods run queries that locate a
 * MolecularIndexingScheme having one, two or three component indexes, each
 * with the supplied index sequence in the given position. The
 * indexPosition* argument must be a string generated by a call to
 * IndexPosition.name().
 */
@Stateful
@RequestScoped
public class MolecularIndexingSchemeDao extends GenericDao {

    /**
     * @see MolecularIndexingSchemeDao
     */
    public MolecularIndexingScheme findSingleIndexScheme(
            MolecularIndexingScheme.IndexPosition indexPosition,
            String indexSequence) {
        Query query = getEntityManager().createNamedQuery(
                "MolecularIndexingScheme.findSingleIndexScheme");
        query.setParameter("indexPosition", indexPosition.name());
        query.setParameter("indexSequence", indexSequence);
        MolecularIndexingScheme molecularIndexingScheme = null;
        try {
            molecularIndexingScheme = (MolecularIndexingScheme) query.getSingleResult();
        } catch (NoResultException ignored) {
        }
        return molecularIndexingScheme;
    }

    /**
     * @see MolecularIndexingSchemeDao
     */
    public MolecularIndexingScheme findDualIndexScheme(
            MolecularIndexingScheme.IndexPosition indexPosition1,
            String indexSequence1,
            MolecularIndexingScheme.IndexPosition indexPosition2,
            String indexSequence2) {
        Query query = getEntityManager().createNamedQuery(
                "MolecularIndexingScheme.findDualIndexScheme");
        query.setParameter("indexPosition1", indexPosition1.name());
        query.setParameter("indexSequence1", indexSequence1);
        query.setParameter("indexPosition2", indexPosition2.name());
        query.setParameter("indexSequence2", indexSequence2);
        MolecularIndexingScheme molecularIndexingScheme = null;
        try {
            molecularIndexingScheme = (MolecularIndexingScheme) query.getSingleResult();
        } catch (NoResultException ignored) {
        }
        return molecularIndexingScheme;
    }

    /**
     * @see MolecularIndexingSchemeDao
     */
    public MolecularIndexingScheme findTripleIndexScheme(
            MolecularIndexingScheme.IndexPosition indexPosition1,
            String indexSequence1,
            MolecularIndexingScheme.IndexPosition indexPosition2,
            String indexSequence2,
            MolecularIndexingScheme.IndexPosition indexPosition3,
            String indexSequence3) {
        Query query = getEntityManager().createNamedQuery(
                "MolecularIndexingScheme.findTripleIndexScheme");
        query.setParameter("indexPosition1", indexPosition1.name());
        query.setParameter("indexSequence1", indexSequence1);
        query.setParameter("indexPosition2", indexPosition2.name());
        query.setParameter("indexSequence2", indexSequence2);
        query.setParameter("indexPosition3", indexPosition3.name());
        query.setParameter("indexSequence3", indexSequence3);
        MolecularIndexingScheme molecularIndexingScheme = null;
        try {
            molecularIndexingScheme = (MolecularIndexingScheme) query.getSingleResult();
        } catch (NoResultException ignored) {
        }
        return molecularIndexingScheme;
    }

    /**
     * Queries and returns a MolecularIndexingScheme with the given name.
     */
    public MolecularIndexingScheme findByName(String name) {
        Query query = getEntityManager().createNamedQuery(
                "MolecularIndexingScheme.findByName");
        query.setParameter("name", name);
        MolecularIndexingScheme molecularIndexingScheme = null;
        try {
            molecularIndexingScheme = (MolecularIndexingScheme) query.getSingleResult();
        } catch (NoResultException ignored) {
        }
        return molecularIndexingScheme;
    }

    public List<MolecularIndexingScheme> findByNames(Collection<String> names) {
        return findListByList(MolecularIndexingScheme.class, MolecularIndexingScheme_.name, new HashSet<>(names));
    }

    public List<MolecularIndexingScheme> findAllIlluminaSchemes() {
        Query query = getEntityManager().createNamedQuery(
                "MolecularIndexingScheme.findAllIlluminaSchemes");
        return query.getResultList();
    }

}
