package org.broadinstitute.gpinformatics.mercury.control.dao.storage;

import com.google.auth.Credentials;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import org.broadinstitute.bsp.client.util.MessageCollection;

import javax.ejb.Stateful;
import javax.enterprise.context.RequestScoped;
import java.io.File;
import java.io.FileInputStream;

/**
 * This class accesses Google Storage buckets. For OAuth2 authentication a pre-configured stored
 * credential key is used that authorizes the Mercury server, and no Google login UI is needed.
 */
@RequestScoped
@Stateful
public class GoogleBucketDao {
    private GoogleStorageConfig googleStorageConfig;
    private Credentials credentials = null;

    /**
     * Reads and returns content of a file as bytes, or null if no such file.
     */
    public byte[] download(String filename, MessageCollection messageCollection) {
        Blob blob = null;
        if (credentials == null) {
            authorizeServiceAccountKey(messageCollection);
        }
        if (credentials != null) {
            Storage storage = StorageOptions.newBuilder().setCredentials(credentials)
                    .setProjectId(googleStorageConfig.getProject()).build().getService();
            blob = storage.get(BlobId.of(googleStorageConfig.getBucketName(), filename));
        }
        return (blob != null) ? blob.getContent() : null;
    }

    /** Authorizes Google Storage access for Mercury as a service account. */
    private void authorizeServiceAccountKey(MessageCollection messages) {
        try {
            File credentialFile = new File(googleStorageConfig.getCredentialFile());
            if (credentialFile.exists()) {
                // The credential file is expected to contain the json service account key
                // generated by page https://console.cloud.google.com/apis/credentials
                credentials = GoogleCredentials.fromStream(new FileInputStream(credentialFile));
            } else {
                messages.addError("Google credential file is missing: %s", googleStorageConfig.getCredentialFile());
            }
        } catch (Exception e) {
            messages.addError("Google service account authorization failed: %s", e.toString());
        }
    }

    public void setConfigGoogleStorageConfig(GoogleStorageConfig googleStorageConfig) {
        this.googleStorageConfig = googleStorageConfig;
    }
}