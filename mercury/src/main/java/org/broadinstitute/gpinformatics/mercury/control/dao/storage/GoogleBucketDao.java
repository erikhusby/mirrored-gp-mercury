package org.broadinstitute.gpinformatics.mercury.control.dao.storage;

import com.google.auth.Credentials;
import com.google.auth.oauth2.GoogleCredentials;
import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.StringUtils;
import org.broadinstitute.bsp.client.util.MessageCollection;

import javax.ejb.Stateful;
import javax.enterprise.context.RequestScoped;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * This class accesses Google Storage buckets using Service Account authentication.
 * Requires a pre-configured stored credential, in the form of json string in a file.
 *
 */
@RequestScoped
@Stateful
public class GoogleBucketDao {
    private GoogleStorageConfig googleStorageConfig;
    private Credentials credentials = null;
    private Credentials writerCredentials = null;

    public void setConfigGoogleStorageConfig(GoogleStorageConfig googleStorageConfig) {
        this.googleStorageConfig = googleStorageConfig;
    }

    /** Returns a list of the files' blobIds in the bucket. */
    public List<String> list(MessageCollection messageCollection) {
        makeCredential(messageCollection);
        if (credentials == null) {
            return Collections.emptyList();
        } else {
            Storage storage = StorageOptions.newBuilder().setCredentials(credentials)
                    .setProjectId(googleStorageConfig.getProject()).build().getService();
            Set<String> names = new HashSet<>();
            storage.list(googleStorageConfig.getBucketName()).iterateAll().forEach(blob -> names.add(blob.getName()));
            return names.stream().sorted().collect(Collectors.toList());
        }
    }

    /**
     * Reads and returns content of a file as bytes, or null if no such file.
     */
    public byte[] download(String filename, MessageCollection messageCollection) {
        makeCredential(messageCollection);
        if (credentials == null) {
            return null;
        } else {
            Storage storage = StorageOptions.newBuilder().setCredentials(credentials)
                    .setProjectId(googleStorageConfig.getProject()).build().getService();
            Blob blob = storage.get(BlobId.of(googleStorageConfig.getBucketName(), filename));
            return (blob != null) ? blob.getContent() : null;
        }
    }

    /**
     * Writes a file to the bucket for Arquillian testing.
     */
    public void upload(String filename, byte[] content, MessageCollection messageCollection) {
        makeWriterCredential(messageCollection);
        if (writerCredentials != null) {
            Storage storage = StorageOptions.newBuilder().setCredentials(writerCredentials)
                    .setProjectId(googleStorageConfig.getProject()).build().getService();
            BlobInfo blobInfo = BlobInfo.newBuilder(googleStorageConfig.getBucketName(), filename).
                    setContentType("text/plain").build();
            Blob blob = storage.get(blobInfo.getBlobId());
            // This will create a new file or overwrite an existing one.
            storage.create(blobInfo, content);
        }
    }

    /**
     * Authorizes Google Storage access for Mercury as a service account.
     */
    private void makeCredential(MessageCollection messages) {
        if (credentials == null) {
            File credentialFile = new File(googleStorageConfig.getCredentialFile());
            if (credentialFile.exists()) {
                // The credential file is expected to contain the json service account key
                // generated by page https://console.cloud.google.com/apis/credentials
                try {
                    credentials = GoogleCredentials.fromStream(new FileInputStream(credentialFile));
                } catch (FileNotFoundException e) {
                    messages.addError("Credential file is missing: %s", googleStorageConfig.getCredentialFile());
                } catch (IOException e) {
                    messages.addError("Reading credential file gives: %s", e.toString());
                }
            } else {
                messages.addError("Credential file is missing: %s", googleStorageConfig.getCredentialFile());
            }
        }
    }

    /**
     * Authorizes Google Storage access for Mercury as a service account.
     */
    private void makeWriterCredential(MessageCollection messages) {
        if (writerCredentials == null) {
            File writerCredentialFile = new File(googleStorageConfig.getWriterCredentialFile());
            if (writerCredentialFile.exists()) {
                try {
                    writerCredentials = GoogleCredentials.fromStream(new FileInputStream(writerCredentialFile));
                } catch (FileNotFoundException e) {
                    messages.addError("Writer credential file is missing: %s",
                            googleStorageConfig.getWriterCredentialFile());
                } catch (IOException e) {
                    messages.addError("Reading writer credential file gives: %s", e.toString());
                }
            } else {
                messages.addError("Wrtier credential file is missing: %s",
                        googleStorageConfig.getWriterCredentialFile());
            }
        }
    }

    /** Generates status messages while reading a bucket file, for debug purposes. */
    public void test(MessageCollection messageCollection) {
        if (StringUtils.isBlank(googleStorageConfig.getCredentialFile()) ||
                StringUtils.isBlank(googleStorageConfig.getProject()) ||
                StringUtils.isBlank(googleStorageConfig.getBucketName())) {
            messageCollection.addError("mercury-config.yaml needs GoogleStorage credentialFile, project, bucketName.");
            return;
        }
        File credentialFile = new File(googleStorageConfig.getCredentialFile());
        try {
            if (!credentialFile.exists() || !credentialFile.canRead() ||
                    StringUtils.isBlank(FileUtils.readFileToString(credentialFile))) {
                messageCollection.addError("Credential file " + credentialFile.getAbsolutePath() +
                        " is missing, unreadable, or empty.");
                return;
            }
        } catch (Exception e) {
            messageCollection.addError("Exception when reading credentialFile " + credentialFile.getAbsolutePath() +
                    " : " + e.toString());
            return;
        }
        try {
            credentials = GoogleCredentials.fromStream(new FileInputStream(credentialFile));
        } catch (Exception e) {
            messageCollection.addError("Exception when parsing credentialFile " + credentialFile.getAbsolutePath() +
                    " : " + e.toString());
            return;
        }
        if (credentials == null) {
            messageCollection.addError("Credential file " + credentialFile.getAbsolutePath() +
                    " cannot be parsed into a GoogleCredential object.");
            return;
        }
        try {
            ServiceAccountCredentials serviceAccountCredentials = (ServiceAccountCredentials) credentials;
            messageCollection.addInfo("Credential file has AuthenticationType: " + credentials.getAuthenticationType() +
                    ", Token server: " + serviceAccountCredentials.getTokenServerUri().toString() +
                    ", Account: " + serviceAccountCredentials.getAccount() +
                    ", Scopes: " + StringUtils.join(serviceAccountCredentials.getScopes(), ", "));
        } catch (Exception e) {
            messageCollection.addError("Exception when extracting data from GoogleCredential: " + e.toString());
            return;
        }
        Storage storage = StorageOptions.newBuilder().setCredentials(credentials).
                setProjectId(googleStorageConfig.getProject()).build().getService();
        messageCollection.addInfo("Storage object service account: " +
                storage.getServiceAccount(googleStorageConfig.getProject()).toString() +
                ", storage host: " + storage.getOptions().getHost().toString());
        List<String> permissions = Arrays.asList(
                "storage.objects.list", "storage.objects.get", "storage.objects.create",
                "storage.objects.delete", "storage.objects.getIamPolicy", "storage.objects.setIamPolicy",
                "storage.objects.update", "storage.buckets.list", "storage.buckets.get",
                "storage.buckets.create", "storage.buckets.delete", "storage.buckets.getIamPolicy",
                "storage.buckets.setIamPolicy", "storage.buckets.update");
        List<String> filenames = new ArrayList<>();
        storage.list(googleStorageConfig.getBucketName()).iterateAll().forEach(blob -> filenames.add(blob.getName()));
        messageCollection.addInfo("List of bucket " + googleStorageConfig.getBucketName() +
                " gives " + filenames.size() + " filenames.");
        if (!filenames.isEmpty()) {
            int randomIdx = new Random().nextInt(filenames.size());
            Blob blob = storage.get(BlobId.of(googleStorageConfig.getBucketName(), filenames.get(randomIdx)));
            if (blob == null) {
                messageCollection.addError("Reading file " + filenames.get(randomIdx) + " returns a null blob.");
                return;
            }
            messageCollection.addInfo("Reading file " + filenames.get(randomIdx) +
                    "returns blobId " + blob.getBlobId() +
                    ", content length " + blob.getContent().length);
        }
    }
}